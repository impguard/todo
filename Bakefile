#!/usr/bin/env bash

docker_network=todo_network
docker_volume=todo_volume
docker_db=todo_db
docker_service=todo_service

db_host=localhost
db_port=5432
db_database=todo
db_user="admin"
db_password=default
db_seed="db/seeds/local/"

service_image=todo_service:latest

function command-not-found ()
{
  ! command -v "$1" >/dev/null 2>&1
}

function check-init ()
{
  if [ ! -f .init ]; then
    bake_echo_red "Please run init first: bake init"
    exit 1
  fi
}

function check-build ()
{
  if [ ! -f .build ]; then
    bake_echo_red "Please run build first: bake build"
    exit 1
  fi
}

bake_task init "Initialize a local development environment."
function init ()
{
  if command-not-found flyway; then
    bake_echo_red "Please install flyway: brew install flyway"
    exit 1
  fi

  if command-not-found psql; then
    bake_echo_red "Please install postgres: brew install postgresql"
    exit 1
  fi

  if command-not-found docker; then
    bake_echo_red "Please install docker: brew install docker"
    exit 1
  fi

  if ! docker network inspect "$docker_network" >/dev/null 2>&1; then
    docker network create "$docker_network" >/dev/null
    bake_echo_green "Setup docker network: $docker_network"
  fi

  if ! docker volume inspect "$docker_volume" >/dev/null 2>&1; then
    docker volume create "$docker_volume" >/dev/null
    bake_echo_green "Setup docker volume: $docker_volume"
  fi

  touch .init
}

bake_task build "Build artifacts to be run."
function build ()
{
  check-init

  docker build -f build/service/Dockerfile -t "$service_image" .
  bake_echo_green "Built service"

  touch .build
}

function start.db ()
{
  local url="postgresql://$db_user:$db_password@$db_host:$db_port/$db_database"

  if docker top "$docker_db" >/dev/null 2>&1; then
    return
  fi

  docker run -d --rm --name "$docker_db" \
    -e POSTGRES_PASSWORD="$db_password" \
    -e POSTGRES_USER="$db_user" \
    -e POSTGRES_DB="$db_database" \
    -p 5432:5432 \
    -v "$docker_volume" \
    --network "$docker_network" \
    "postgres:10.3" >/dev/null

  while true; do
    if command psql -t -c "select now()" "$url" >/dev/null 2>&1; then
      break
    fi
    bake_echo_yellow "Waiting for database to start"
    sleep 1
  done
}

function start.service ()
{
  if docker top "$docker_service" >/dev/null 2>&1; then
    return
  fi

  docker run -d --rm --name "$docker_service" \
    -v "$(pwd)/service:/service" \
    -p "80:80" \
    -e "GUNICORN_RELOAD=True" \
    --network "$docker_network" \
    "$service_image" >/dev/null
}

bake_task start "Starts everything locally."
function start ()
{
  check-init
  check-build

  local container="${1:-}"
  if [ -z "$container" ]; then
    container="all"
  fi

  if [ "$container" == "all" ] || [ "$container" == "db" ]; then
    start.db
    bake_echo_green "Started database. Logs at: bake logs db"
    flyway migrate >/dev/null 2>&1
    bake_echo_green "Ran latest database migrations."
  fi

  if [ "$container" == "all" ] || [ "$container" == "service" ]; then
    start.service
    bake_echo_green "Started service. Logs at: bake logs service"
  fi
}

bake_task stop "Stops all running services."
# shellcheck disable=SC2120
function stop ()
{
  local container="${1:-}"
  if [ -z "$container" ]; then
    container="all"
  fi

  if [ "$container" == "all" ] || [ "$container" == "db" ]; then
    docker kill "$docker_db" >/dev/null 2>&1 || true
    bake_echo_green "Stopped local database"
  fi

  if [ "$container" == "all" ] || [ "$container" == "service" ]; then
    docker kill "$docker_service" >/dev/null 2>&1 || true
    bake_echo_green "Stopped local service"
  fi
}

bake_task clean "Cleans all local build artifacts"
function clean ()
{
  stop all

  docker network rm "$docker_network" >/dev/null 2>&1 || true
  bake_echo_green "Cleaned docker network: $docker_network"

  docker volume rm "$docker_volume" >/dev/null 2>&1 || true
  bake_echo_green "Cleaned docker volume: $docker_volume"

  rm .build >/dev/null 2>&1 || true
  bake_echo_green "Cleaned project"
}

bake_task flyway "Runs the flyway command. Default environment is local."
function flyway ()
{
  local locations="filesystem:db/migrations,filesystem:$db_seed"
  local url="jdbc:postgresql://$db_host:$db_port/$db_database"

  command flyway -user="$db_user" \
         -password="$db_password" \
         -url="$url" \
         -locations="$locations" \
         "$@"
}

function handle.migration ()
{
  local raw_description="$1"
  local description version
  description=$(echo "${raw_description// /_}" \
    | tr '[:upper:]' '[:lower:]' \
    | tr -d .)
  version=$(date -u +"%Y%m%d.%H%M%S")

  local migration_file="V${version}__${description}.sql"
  local destination="$2"

  echo "/* $raw_description */" > "$destination/$migration_file"
  echo "Created \"$raw_description\" at $destination/$migration_file"

}

bake_task create.migration "Create a new migration."
function create.migration ()
{
  if [ -z "${1:-}" ]; then
    bake_echo_red "Please pass a short description of the migration."
    exit 1
  fi

  handle.migration "$1" "db/migrations"
}

bake_task create.seed "Create a new seed file."
function create.seed ()
{
  if [ -z "${1:-}" ]; then
    bake_echo_red "Please pass a short description of the seed."
    exit 1
  fi

  handle.migration "$1" "$db_seed"
}

bake_task psql "psql into the database."
function psql ()
{
  local url="postgresql://$db_user:$db_password@$db_host:$db_port/$db_database"
  command psql $url "$@"
}

bake_task logs "Display logs for a container."
function logs ()
{
  if [ "${1:-}" == "service" ]; then
    exec docker logs -f "$docker_service"
  fi

  if [ "${1:-}" == "db" ]; then
    exec docker logs -f "$docker_db"
  fi

  bake_echo_red "Please provide: service or db"
  exit 1
}

bake_task shell "Shell into a container."
function shell ()
{
  if [ "${1:-}" == "service" ]; then
    exec docker exec -it "$docker_service" /bin/bash
  fi

  if [ "${1:-}" == "db" ]; then
    exec docker exec -it "$docker_db" /bin/bash
  fi

  bake_echo_red "Please provide: service or db"
  exit 1
}

bake_task ipython "Runs ipython in the service container."
function ipython ()
{
  exec docker exec -it "$docker_service" /bin/bash -c ipython
}
